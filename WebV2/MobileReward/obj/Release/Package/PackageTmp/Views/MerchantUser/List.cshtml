@model IList<MobileReward.ViewModel.UserViewModel>

@{
    Layout = "~/Views/Shared/_SubLayout.cshtml";
    ViewBag.Title = "List";
    //MobileReward.Models.MobiRewardDb db = new MobileReward.Models.MobiRewardDb();
}

@using (Html.BeginForm("List", "MerchantUser", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
<div class="right_side_box">
    @*<div class="right_side_box" id="divDetails">*@
    <div class="right_side_innerbox">
        <h1 style="font-size: 15px; padding-left: 16px;">Users List</h1>
        <div style="text-align: right; padding-right: 18px">
            <input type="text" name="keyword" style="width: 300px; height: 30px" />
            &nbsp;
            <input type="submit" value="Search" id="btnSubmit" class="user_promotion" style="width: 80px; background-image: -webkit-gradient(linear,left top,left bottom,color-stop(0, #2085e4),color-stop(1, #0456a4)); border-radius: 5px; border: 1px solid #06447e;" />
           &nbsp; &nbsp;<input type="submit" value="Reset" id="btnReset" name="command" class="user_promotion" style="width: 80px; background-image: -webkit-gradient(linear,left top,left bottom,color-stop(0, #2085e4),color-stop(1, #0456a4)); background-image: -moz-linear-gradient(center top , #2085E4, #0456A4); border-radius: 5px; border: 1px solid #06447e;" />
        </div>
        <br />
      
        <div style="float:left;margin-left:15px">
            <a href="@Url.Action("Create", "MerchantUser")">
                <div class="button_account-new" id="promotion_button" style="width:100px">Add new user</div>
            </a>
        </div>
        <br />
        <br />
        <br />
        <div class="clear"></div>
        <div class="box_table" style="width:100%;margin-top:0px;">
            <table class="box_table CSSTableGenerator" id="tblpromotion" style="width: 100%">
                <thead>
                    <tr>
                        <th>User Name</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email Id</th>
                        <th>Active</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: items" class="form-inline">
                    @foreach (var p in @Model)
                    {
                        <tr>
                            <td>
                                 <span>@p.UserName</span>
                            </td>
                            <td>@p.FirstName</td>
                            <td>@p.LastName</td>
                            <td>@p.Email</td>
                            <td>@p.Status</td>
                            <td>
                                <a href="@Url.Action("Edit", "MerchantUser", new { id = @p.UserId })">
                                    <b>Edit</b>
                                </a>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
     
    </div>
    <br />
    <br />
    <div class="pagination" style="text-align: left; padding-right: 60px;margin-left: 15px;">
        @pageLinks()
    </div>
    <div class="clear"></div>
    @helper buildLinks(int start, int end, string innerContent)
{
    for (int i = start; i <= end; i++)
    {
        <a class="@(i == ViewBag.CurrentPage ? "current" : "")" href="@Url.Action("List", "MerchantUser", new { page = i })">@(innerContent ?? i.ToString())</a>
    }

}

    @helper pageLinks()
{
    const int maxPages = 11;

    if (ViewBag.TotalPages <= maxPages)
    {
        @buildLinks(1, (int)ViewBag.TotalPages, null)
        return;
    }

    int pagesAfter = ViewBag.TotalPages - ViewBag.CurrentPage; // Number of pages after current
    int pagesBefore = ViewBag.CurrentPage - 1; // Number of pages before current

    if (pagesAfter <= 4)
    {
        @buildLinks(1, 1, null) // Show 1st page

        int pageSubset = ViewBag.TotalPages - maxPages - 1 > 1 ? ViewBag.TotalPages - maxPages - 1 : 2;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

                                                @buildLinks(ViewBag.TotalPages - maxPages + 3, ViewBag.TotalPages, null) // Show last pages

        return; // Exit
    }

    if (pagesBefore <= 4)
    {
        @buildLinks(1, maxPages - 2, null) // Show 1st pages


        int pageSubset = maxPages + 2 < ViewBag.TotalPages ? maxPages + 2 : ViewBag.TotalPages - 1;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

                                                @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page

        return; // Exit

    }

    if (pagesAfter > 4)
    {
        @buildLinks(1, 1, null) // Show 1st pages

        int pageSubset1 = ViewBag.CurrentPage - 7 > 1 ? ViewBag.CurrentPage - 7 : 2;
        int pageSubset2 = ViewBag.CurrentPage + 7 < ViewBag.TotalPages ? ViewBag.CurrentPage + 7 : ViewBag.TotalPages - 1;

        @buildLinks(pageSubset1, pageSubset1, pageSubset1 == ViewBag.CurrentPage - 4 ? null : "...") // Show 1st page subset (...)

                                                                                                    @buildLinks(ViewBag.CurrentPage - 3, ViewBag.CurrentPage + 3, null) // Show middle pages

        // Show 2nd page subset (...)
        // only show ... if page is contigous to the previous one.
        @buildLinks(pageSubset2, pageSubset2, pageSubset2 == ViewBag.CurrentPage + 4 ? null : "...")
        @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page

        return; // Exit

    }
    }
</div>

}




@*@using (Html.BeginForm("List", "MerchantUser", FormMethod.Post, new { enctype = "multipart/form-data" }))
{


    <div class="right_side_box">
        <h1 style="font-size: 15px; padding-left: 16px;">Merchant User List</h1>
        <div style="text-align: right; padding-right: 18px">
            <input type="text" name="keyword" style="width: 300px; height: 30px" />
            &nbsp;
            <input type="submit" value="Search" id="btnSubmit" class="user_promotion" style="width: 80px; background-image: -webkit-gradient(linear,left top,left bottom,color-stop(0, #2085e4),color-stop(1, #0456a4)); border-radius: 5px; border: 1px solid #06447e;" />
            &nbsp&nbsp <input type="submit" value="Reset" id="btnReset" name="command" class="user_promotion" style="width: 80px; background-image: -webkit-gradient(linear,left top,left bottom,color-stop(0, #2085e4),color-stop(1, #0456a4)); background-image: -moz-linear-gradient(center top , #2085E4, #0456A4); border-radius: 5px; border: 1px solid #06447e;" />
        </div>
        <div style="float:left;margin-left:15px">
            <a href="@Url.Action("Create", "MerchantUser")">
                <div class="button_account-new" id="promotion_button" style="width:100px">Add new user</div>
            </a>
        </div>
        @if (@Model == null || @Model.Count == 0)
        {
            <h3>No record found!</h3>
        }
        @foreach (var p in @Model)
        {
            <div class="user_promotion_box">

                <div class="promotions_box" id="list">
                    <span data-bind="text : UserName">
                        <label style="color: #0f0f0f;">User Name: </label>
                        @p.UserName
                    </span>
                    <div class="clear"></div>
                    <span data-bind="text : FirstName">
                        <label style="color: #0f0f0f;">First Name: </label>@p.FirstName
                    </span>
                    <div class="clear"></div>
                    <span data-bind="text : LastName">
                        <label style="color: #0f0f0f;">Last Name: </label>
                        @p.LastName
                    </span>
                    <div class="clear"></div>
                    <span data-bind="text : Email">
                        <label style="color: #0f0f0f;">Email Id: </label>
                        @p.Email
                    </span>
                    <div class="clear"></div>
                    <span data-bind="text : Status">
                        <label style="color: #0f0f0f;">Active: </label>
                        @p.Status
                    </span>
                </div>
                <div class="clear">&nbsp;</div>
                <div>
                    <a href="@Url.Action("Edit", "MerchantUser", new { id = @p.UserId })">
                        <div class="user_promotion" id="promotion_button">Edit</div>
                    </a>
                </div>
                <div class="clear">&nbsp;</div>
            </div>
        }
        <br />
        <div class="pagination" style="text-align: left; padding-right: 60px;margin-left: 15px;">
            @pageLinks()
        </div>
        <div class="clear"></div>
    </div>
}
@helper buildLinks(int start, int end, string innerContent)
{
    for (int i = start; i <= end; i++)
    {
        <a class="@(i == ViewBag.CurrentPage ? "current" : "")" href="@Url.Action("List", "MerchantUser", new { page = i })">@(innerContent ?? i.ToString())</a>
    }

}

@helper pageLinks()
{
    const int maxPages = 11;

    if (ViewBag.TotalPages <= maxPages)
    {
        @buildLinks(1, (int)ViewBag.TotalPages, null)
        return;
    }

    int pagesAfter = ViewBag.TotalPages - ViewBag.CurrentPage; // Number of pages after current
    int pagesBefore = ViewBag.CurrentPage - 1; // Number of pages before current

    if (pagesAfter <= 4)
    {
        @buildLinks(1, 1, null) // Show 1st page

        int pageSubset = ViewBag.TotalPages - maxPages - 1 > 1 ? ViewBag.TotalPages - maxPages - 1 : 2;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

                                                @buildLinks(ViewBag.TotalPages - maxPages + 3, ViewBag.TotalPages, null) // Show last pages

        return; // Exit
    }

    if (pagesBefore <= 4)
    {
        @buildLinks(1, maxPages - 2, null) // Show 1st pages


        int pageSubset = maxPages + 2 < ViewBag.TotalPages ? maxPages + 2 : ViewBag.TotalPages - 1;
        @buildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

                                                @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page

        return; // Exit

    }

    if (pagesAfter > 4)
    {
        @buildLinks(1, 1, null) // Show 1st pages

        int pageSubset1 = ViewBag.CurrentPage - 7 > 1 ? ViewBag.CurrentPage - 7 : 2;
        int pageSubset2 = ViewBag.CurrentPage + 7 < ViewBag.TotalPages ? ViewBag.CurrentPage + 7 : ViewBag.TotalPages - 1;

        @buildLinks(pageSubset1, pageSubset1, pageSubset1 == ViewBag.CurrentPage - 4 ? null : "...") // Show 1st page subset (...)

                                                                                                    @buildLinks(ViewBag.CurrentPage - 3, ViewBag.CurrentPage + 3, null) // Show middle pages

        // Show 2nd page subset (...)
        // only show ... if page is contigous to the previous one.
        @buildLinks(pageSubset2, pageSubset2, pageSubset2 == ViewBag.CurrentPage + 4 ? null : "...")
        @buildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page

        return; // Exit

    }
}*@
