@using MobiReward.Common
@model IList<MobileReward.Models.UserProfile>

@{
    Layout = "~/Views/Shared/_SubLayout.cshtml";
    ViewBag.Title = "Users List";
}
@using (Html.BeginForm("Users", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    
<div class="right_side_box">
    <h1 style="font-size: 15px; padding-left: 16px;">Users</h1>
    <div style="text-align:right;padding-right:18px">
        <input type="text" name="keyword" style="width:300px;height:30px" /> &nbsp; 
        <input type="submit" value="Search" id="btnSubmit" class="user_promotion" style="width:80px;background-image:-webkit-gradient(linear,left top,left bottom,color-stop(0, #2085e4),color-stop(1, #0456a4));border-radius:5px;border:1px solid #06447e;" />
         &nbsp&nbsp <input type="submit" value="Reset" id="btnReset" name="command" class="user_promotion" style="width: 80px; background-image: -webkit-gradient(linear,left top,left bottom,color-stop(0, #2085e4),color-stop(1, #0456a4)); background-image: -moz-linear-gradient(center top , #2085E4, #0456A4); border-radius: 5px; border: 1px solid #06447e;" />
    </div>


    @foreach (var p in @Model)
    {
        
        <div class="user_coupon_box">           
            <span>
                <b>User Name : </b>@p.UserName                
                <br/>
                <b>User  : </b>@p.FirstName @p.LastName
                <br/>
                @if (p.Status == true)
                {
                  <b>User Status : Active</b>
                <br/>   
                }

                else
                {
                   <b>User Status : In-Active</b>
                <br/> 
                }                
                <b>Registration Number : </b>@p.CompanyRegistrationNo<br>
                <b>Address : </b>@p.Address<br>
                <b>Contact : </b>@p.ContactNo<br>
                <b>Email : </b>@p.Email<br>
                </span><br/>  
                 @if (p.Status == true)
                {
                  <div class="user_promotion" id="promotion_button" style="margin-top: 120px;">@Html.ActionLink("De-Activate", "DelUsers", "Admin", new {id=@p.UserId }, new { onclick = "return confirm('Are you sure you want to deactivate this user?');",style="color:white;"  })</div>                        
                <br/>   
                }

                else
                {
                   <div class="user_promotion" id="promotion_button" style="margin-top: 120px;">@Html.ActionLink("Activate", "ActivateUsers", "Admin", new {id=@p.UserId }, new { onclick = "return confirm('Are you sure you want to activate this user?');",style="color:white;" })</div>                        
                <br/> 
                }                                      
                
        </div>
    }
      <br />
        <div class="pagination" style="text-align: left; padding-right: 60px;margin-left: 15px;">
         
            @*@for (int p=1; p < ViewBag.TotalPage; p++)
            {
                <a class="@(p==ViewBag.CurrentPage ?"Current":"")" href="@Url.Action("AdminPromotionList", "Admin",new{Page=p})">@p</a>;
            }*@
            @pageLinks() 
        </div>
    <div class="clear"></div>
</div>

}
@helper BuildLinks(int start, int end, string innerContent)
{
     for (int i = start; i <= end; i++)
     {
         <a class="@(i == ViewBag.CurrentPage ? "current" : "")"  href="@Url.Action( "Users","Admin", new { page = i })">@(innerContent ?? i.ToString())</a>  
     }
     
}
 
@helper pageLinks()
{
    const int maxPages = 11;
     
    if (ViewBag.TotalPages <= maxPages)
    {
        @BuildLinks(1, (int)ViewBag.TotalPages, null)
        return;
    }

    int pagesAfter = ViewBag.TotalPages - ViewBag.CurrentPage; // Number of pages after current
    int pagesBefore = ViewBag.CurrentPage - 1; // Number of pages before current
 
    if (pagesAfter <= 4)
    {
        @BuildLinks(1, 1, null) // Show 1st page
 
        int pageSubset = ViewBag.TotalPages - maxPages - 1 > 1 ? ViewBag.TotalPages - maxPages - 1 : 2;
        @BuildLinks(pageSubset, pageSubset, "...") // Show page subset (...)
 
        @BuildLinks(ViewBag.TotalPages - maxPages + 3, ViewBag.TotalPages, null) // Show last pages
 
        return; // Exit
    }
 
    if (pagesBefore <= 4)
    {
       @BuildLinks(1, maxPages - 2, null) // Show 1st pages
 
 
       int pageSubset = maxPages + 2 < ViewBag.TotalPages ? maxPages + 2 : ViewBag.TotalPages - 1;
       @BuildLinks(pageSubset, pageSubset, "...") // Show page subset (...)
 
       @BuildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page
 
        return; // Exit
 
    }
 
    if (pagesAfter > 4)
    {
        @BuildLinks(1, 1, null) // Show 1st pages
 
        int pageSubset1 = ViewBag.CurrentPage - 7 > 1 ? ViewBag.CurrentPage - 7 : 2;
        int pageSubset2 = ViewBag.CurrentPage + 7 < ViewBag.TotalPages ? ViewBag.CurrentPage + 7 : ViewBag.TotalPages - 1;
 
        @BuildLinks(pageSubset1, pageSubset1, pageSubset1 == ViewBag.CurrentPage - 4 ? null : "...") // Show 1st page subset (...)
 
        @BuildLinks(ViewBag.CurrentPage - 3, ViewBag.CurrentPage + 3, null) // Show middle pages
 
        // Show 2nd page subset (...)
        // only show ... if page is contigous to the previous one.
        @BuildLinks(pageSubset2, pageSubset2, pageSubset2 ==  ViewBag.CurrentPage + 4 ? null : "...")
        @BuildLinks(ViewBag.TotalPages, ViewBag.TotalPages, null) // Show last page
 
        return; // Exit
 
    }    
}